(define (find s predicate)
	(cond ((null? s) #f)
		((predicate(car s))(car s))
		(else (find (cdr-stream s) predicate))
	)
)

(define (scale-stream s k)
	(cons-stream (* (car s) k) (scale-stream (cdr-stream s) k))
)

(define (has-cycle s)
	(define (get now s)
		(cond((null? s) #f)
			 ((null? (cdr-stream s)) #f)
			((eq? now s) #t)
			(else (get (cdr-stream now) (cdr-stream (cdr-stream s))))
		)
	)
	(get s (cdr-stream s))
)

(define (has-cycle-constant s)
	(define (get now s)
		(cond((null? s) #f)
			 ((null? (cdr-stream s)) #f)
			((eq? now s) #t)
			(else (get (cdr-stream now) (cdr-stream (cdr-stream s))))
		)
	)
	(get s (cdr-stream s))
)
